{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.board = initialState;\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    /**\n   * Returns the current game board state.\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game score.\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * Returns the current game status.\n   * @returns {string}\n   */ /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.resetBoard();\n        this.addRandomTile();\n        this.addRandomTile();\n        this.status = \"playing\";\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.start();\n    }\n    moveLeft() {\n        this.move((row)=>row, (row)=>row);\n    }\n    moveRight() {\n        this.move((row)=>row.reverse(), (row)=>row.reverse());\n    }\n    moveUp() {\n        this.moveTranspose((row)=>row, (row)=>row);\n    }\n    moveDown() {\n        this.moveTranspose((row)=>row.reverse(), (row)=>row.reverse());\n    }\n    resetBoard() {\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        this.board.forEach((row, i)=>{\n            row.forEach((cell, j)=>{\n                if (cell === 0) emptyCells.push([\n                    i,\n                    j\n                ]);\n            });\n        });\n        if (emptyCells.length > 0) {\n            const [x, y] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    /**\n   * Moves and merges the tiles.\n   * @param {Function} processRow\n   * @param {Function} unprocessRow\n   */ move(processRow, unprocessRow) {\n        let moved = false;\n        const newBoard = this.board.map((row, rowIndex)=>{\n            const processedRow = processRow([\n                ...row\n            ]);\n            const mergedRow = this.mergeRow(processedRow);\n            if (!this.rowsEqual(processedRow, mergedRow)) moved = true;\n            return unprocessRow(mergedRow);\n        });\n        if (moved) {\n            this.board = newBoard;\n            this.addRandomTile();\n        }\n        this.updateStatus();\n    }\n    /**\n   * Moves tiles along a transposed version of the board.\n   * @param {Function} processRow\n   * @param {Function} unprocessRow\n   */ moveTranspose(processRow, unprocessRow) {\n        this.board = this.transpose(this.board);\n        this.move(processRow, unprocessRow);\n        this.board = this.transpose(this.board);\n    }\n    /**\n   * Merges a single row and returns the new row.\n   * @param {number[]} row\n   * @returns {number[]}\n   */ mergeRow(row) {\n        const merged = [];\n        let skip = false;\n        for(let i = 0; i < row.length; i++){\n            if (skip) {\n                skip = false;\n                continue;\n            }\n            if (row[i] !== 0 && row[i] === row[i + 1]) {\n                merged.push(row[i] * 2);\n                this.score += row[i] * 2;\n                skip = true;\n            } else if (row[i] !== 0) merged.push(row[i]);\n        }\n        while(merged.length < 4)merged.push(0);\n        return merged;\n    }\n    /**\n   * Transposes a 2D array (flips rows and columns).\n   * @param {number[][]} matrix\n   * @returns {number[][]}\n   */ transpose(matrix) {\n        return matrix[0].map((_, colIndex)=>matrix.map((row)=>row[colIndex]));\n    }\n    /**\n   * Checks if two rows are equal.\n   * @param {number[]} row1\n   * @param {number[]} row2\n   * @returns {boolean}\n   */ rowsEqual(row1, row2) {\n        return row1.every((value, index)=>value === row2[index]);\n    }\n    /**\n   * Updates the game status (playing, win, lose).\n   */ updateStatus() {\n        if (this.board.flat().includes(2048)) this.status = \"win\";\n        else if (!this.board.flat().includes(0) && !this.canMakeMove()) this.status = \"lose\";\n    }\n    /**\n   * Checks if any move is possible.\n   * @returns {boolean}\n   */ canMakeMove() {\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (i > 0 && this.board[i][j] === this.board[i - 1][j] || j > 0 && this.board[i][j] === this.board[i][j - 1]) return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nfunction $09e991522ca7e64e$var$renderGame() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    const cells = document.querySelectorAll(\".field-cell\");\n    state.flat().forEach((cellValue, index)=>{\n        const cell = cells[index];\n        cell.textContent = cellValue || \"\";\n        cell.className = \"field-cell\";\n        if (cellValue) cell.classList.add(`field-cell--${cellValue}`);\n    });\n    const scoreDisplay = document.querySelector(\".game-score\");\n    scoreDisplay.textContent = $09e991522ca7e64e$var$game.getScore();\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\") {\n        document.querySelector(\".message-win\").classList.remove(\"hidden\");\n        document.querySelector(\".message-lose\").classList.add(\"hidden\");\n    } else if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") {\n        document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n        document.querySelector(\".message-win\").classList.add(\"hidden\");\n    } else {\n        document.querySelector(\".message-win\").classList.add(\"hidden\");\n        document.querySelector(\".message-lose\").classList.add(\"hidden\");\n    }\n}\nfunction $09e991522ca7e64e$var$startOrRestartGame() {\n    const startButton = document.querySelector(\".start\") || document.querySelector(\".restart\");\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") $09e991522ca7e64e$var$game.start();\n    else $09e991522ca7e64e$var$game.restart();\n    startButton.textContent = \"Restart\";\n    startButton.classList.remove(\"start\");\n    startButton.classList.add(\"restart\");\n    document.querySelector(\".message-start\").classList.add(\"hidden\");\n    $09e991522ca7e64e$var$renderGame();\n}\nfunction $09e991522ca7e64e$var$handleKeyPress(e) {\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    $09e991522ca7e64e$var$renderGame();\n}\ndocument.querySelector(\".start\").addEventListener(\"click\", $09e991522ca7e64e$var$startOrRestartGame);\ndocument.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyPress);\n$09e991522ca7e64e$var$renderGame();\n\n\n//# sourceMappingURL=index.b54a1449.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nfunction renderGame() {\n  const state = game.getState();\n  const cells = document.querySelectorAll('.field-cell');\n\n  state.flat().forEach((cellValue, index) => {\n    const cell = cells[index];\n\n    cell.textContent = cellValue || '';\n    cell.className = 'field-cell';\n\n    if (cellValue) {\n      cell.classList.add(`field-cell--${cellValue}`);\n    }\n  });\n\n  const scoreDisplay = document.querySelector('.game-score');\n\n  scoreDisplay.textContent = game.getScore();\n\n  if (game.getStatus() === 'win') {\n    document.querySelector('.message-win').classList.remove('hidden');\n    document.querySelector('.message-lose').classList.add('hidden');\n  } else if (game.getStatus() === 'lose') {\n    document.querySelector('.message-lose').classList.remove('hidden');\n    document.querySelector('.message-win').classList.add('hidden');\n  } else {\n    document.querySelector('.message-win').classList.add('hidden');\n    document.querySelector('.message-lose').classList.add('hidden');\n  }\n}\n\nfunction startOrRestartGame() {\n  const startButton =\n    document.querySelector('.start') || document.querySelector('.restart');\n\n  if (game.getStatus() !== 'playing') {\n    game.start();\n  } else {\n    game.restart();\n  }\n  startButton.textContent = 'Restart';\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n\n  document.querySelector('.message-start').classList.add('hidden');\n  renderGame();\n}\n\nfunction handleKeyPress(e) {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    default:\n      return;\n  }\n  renderGame();\n}\n\ndocument.querySelector('.start').addEventListener('click', startOrRestartGame);\n\ndocument.addEventListener('keydown', handleKeyPress);\n\nrenderGame();\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   */\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.board = initialState;\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  /**\n   * Returns the current game board state.\n   * @returns {number[][]}\n   */\n\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game score.\n   * @returns {number}\n   */\n\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * Returns the current game status.\n   * @returns {string}\n   */\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.resetBoard();\n    this.addRandomTile();\n    this.addRandomTile();\n    this.status = 'playing';\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.start();\n  }\n\n  moveLeft() {\n    this.move(\n      (row) => row,\n      (row) => row,\n    );\n  }\n\n  moveRight() {\n    this.move(\n      (row) => row.reverse(),\n      (row) => row.reverse(),\n    );\n  }\n\n  moveUp() {\n    this.moveTranspose(\n      (row) => row,\n      (row) => row,\n    );\n  }\n\n  moveDown() {\n    this.moveTranspose(\n      (row) => row.reverse(),\n      (row) => row.reverse(),\n    );\n  }\n\n  resetBoard() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    this.board.forEach((row, i) => {\n      row.forEach((cell, j) => {\n        if (cell === 0) {\n          emptyCells.push([i, j]);\n        }\n      });\n    });\n\n    if (emptyCells.length > 0) {\n      const [x, y] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  /**\n   * Moves and merges the tiles.\n   * @param {Function} processRow\n   * @param {Function} unprocessRow\n   */\n\n  move(processRow, unprocessRow) {\n    let moved = false;\n    const newBoard = this.board.map((row, rowIndex) => {\n      const processedRow = processRow([...row]);\n      const mergedRow = this.mergeRow(processedRow);\n\n      if (!this.rowsEqual(processedRow, mergedRow)) {\n        moved = true;\n      }\n\n      return unprocessRow(mergedRow);\n    });\n\n    if (moved) {\n      this.board = newBoard;\n      this.addRandomTile();\n    }\n    this.updateStatus();\n  }\n\n  /**\n   * Moves tiles along a transposed version of the board.\n   * @param {Function} processRow\n   * @param {Function} unprocessRow\n   */\n\n  moveTranspose(processRow, unprocessRow) {\n    this.board = this.transpose(this.board);\n\n    this.move(processRow, unprocessRow);\n\n    this.board = this.transpose(this.board);\n  }\n\n  /**\n   * Merges a single row and returns the new row.\n   * @param {number[]} row\n   * @returns {number[]}\n   */\n  mergeRow(row) {\n    const merged = [];\n    let skip = false;\n\n    for (let i = 0; i < row.length; i++) {\n      if (skip) {\n        skip = false;\n        continue;\n      }\n\n      if (row[i] !== 0 && row[i] === row[i + 1]) {\n        merged.push(row[i] * 2);\n        this.score += row[i] * 2;\n        skip = true;\n      } else if (row[i] !== 0) {\n        merged.push(row[i]);\n      }\n    }\n\n    while (merged.length < 4) {\n      merged.push(0);\n    }\n\n    return merged;\n  }\n\n  /**\n   * Transposes a 2D array (flips rows and columns).\n   * @param {number[][]} matrix\n   * @returns {number[][]}\n   */\n\n  transpose(matrix) {\n    return matrix[0].map((_, colIndex) => matrix.map((row) => row[colIndex]));\n  }\n\n  /**\n   * Checks if two rows are equal.\n   * @param {number[]} row1\n   * @param {number[]} row2\n   * @returns {boolean}\n   */\n  rowsEqual(row1, row2) {\n    return row1.every((value, index) => value === row2[index]);\n  }\n\n  /**\n   * Updates the game status (playing, win, lose).\n   */\n  updateStatus() {\n    if (this.board.flat().includes(2048)) {\n      this.status = 'win';\n    } else if (!this.board.flat().includes(0) && !this.canMakeMove()) {\n      this.status = 'lose';\n    }\n  }\n\n  /**\n   * Checks if any move is possible.\n   * @returns {boolean}\n   */\n  canMakeMove() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (\n          (i > 0 && this.board[i][j] === this.board[i - 1][j]) ||\n          (j > 0 && this.board[i][j] === this.board[i][j - 1])\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","board","score","status","getState","getScore","getStatus","start","resetBoard","addRandomTile","restart","moveLeft","move","row","moveRight","reverse","moveUp","moveTranspose","moveDown","emptyCells","forEach","i","cell","j","push","length","x","y","Math","floor","random","processRow","unprocessRow","moved","newBoard","map","rowIndex","processedRow","mergedRow","mergeRow","rowsEqual","updateStatus","transpose","merged","skip","matrix","_","colIndex","row1","row2","every","value","index","flat","includes","canMakeMove","$09e991522ca7e64e$var$renderGame","state","cells","document","querySelectorAll","cellValue","textContent","className","classList","add","scoreDisplay","querySelector","remove","addEventListener","startButton","e","key"],"version":3,"file":"index.b54a1449.js.map"}